The provided code is written in a C-style syntax and is syntactically invalid in most popular C-based languages, including JavaScript, C++, C#, and Java. The main error lies in the case statement, which uses a comma-separated list of values. 
Here is a breakdown of the issues with the original code and how to fix them for some of the most common languages.
Issues in the original code
Invalid case syntax: The line case .jpg , .jpeg : is not valid. A case statement typically expects a single value. Multiple values that execute the same code block are handled differently depending on the language.
Case values without break: In languages like C-style JavaScript, C, and C++, cases have "fall-through" behavior. If a break or return statement is omitted, the code continues to execute the next case. While this is sometimes used intentionally, it is not the correct approach for this function.
Missing string delimiters: The case values, such as .jpg, are not correctly delimited as strings, which is how they should be passed into the function to be compared. 
Corrected versions in different languages
JavaScript
This version uses the modern syntax for a switch expression, which allows for comma-separated case values and is concise. 
javascript
function getConType(extn) {
  switch (extn) {
    case '.jpg', '.jpeg':
      return 'image/jpeg';
    case '.png':
      return 'image/png';
    case '.gif':
      return 'image/gif';
    case '.mp4':
      return 'video/mp4';
    case '.mov':
      return 'video/quicktime';
    case '.webm':
      return 'video/webm';
    default:
      return 'application/octet-stream';
  }
}
Alternative JavaScript (with fall-through): This older syntax achieves the same result by stacking cases and relying on fall-through behavior. 
javascript
function getConType(extn) {
  switch (extn) {
    case '.jpg':
    case '.jpeg':
      return 'image/jpeg';
    case '.png':
      return 'image/png';
    case '.gif':
      return 'image/gif';
    case '.mp4':
      return 'video/mp4';
    case '.mov':
      return 'video/quicktime';
    case '.webm':
      return 'video/webm';
    default:
      return 'application/octet-stream';
  }
}
Python
Python does not have a traditional switch statement but uses match/case instead (introduced in version 3.10). 
python
def getConType(extn):
    match extn:
        case '.jpg' | '.jpeg':
            return 'image/jpeg'
        case '.png':
            return 'image/png'
        case '.gif':
            return 'image/gif'
        case '.mp4':
            return 'video/mp4'
        case '.mov':
            return 'video/quicktime'
        case '.webm':
            return 'video/webm'
        case _:
            return 'application/octet-stream'
Go
Go is a more explicit language that does not allow fall-through unless specified. Its switch statement has built-in support for multiple values per case. 
go
package main

import "fmt"

func getConType(extn string) string {
	switch extn {
	case ".jpg", ".jpeg":
		return "image/jpeg"
	case ".png":
		return "image/png"
	case ".gif":
		return "image/gif"
	case ".mp4":
		return "video/mp4"
	case ".mov":
		return "video/quicktime"
	case ".webm":
		return "video/webm"
	default:
		return "application/octet-stream"
	}
}

func main() {
	fmt.Println(getConType(".jpg"))
}
C#
In C#, you would use the classic fall-through behavior or a pattern-matching approach for modern versions. 
csharp
public static string GetConType(string extn)
{
    switch (extn)
    {
        case ".jpg":
        case ".jpeg":
            return "image/jpeg";
        case ".png":
            return "image/png";
        case ".gif":
            return "image/gif";
        case ".mp4":
            return "video/mp4";
        case ".mov":
            return "video/quicktime";
        case ".webm":
            return "video/webm";
        default:
            return "application/octet-stream";
    }
}